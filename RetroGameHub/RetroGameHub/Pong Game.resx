<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="GameTimer.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAHyAAAAEAIAAoEAAAFgAAACgAAAAfAAAAQAAAAAEAIAAAAAAAgA8AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABEREQAMDAwADg4OGi0tLWpFRUWgQkJCnCAgIFkAAAANDQ0NAAAAAAAAAAAAAAAAAAAA
        AAANFBkzEBkhjBQdK8IcM0TsGzFAtQICAQgAAAAAAgEBAAAAAAUKCw1FCwwOGAoICwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAADAwMACAgIJigoKHpxcXF7oqKidKenp5aJiYnTSUlJowEBARcAAAAAAAAAAAAA
        AAAAAAAAGCw5hitWcv8oQWH/K1Nx/ypXcdUAAAAWBAIBAAAAAAMXKTVsK1Vv6xUiLKcHBQcUCgoKAAAA
        AAAAAAAAAAAAAAAAAAAAAAAACQkJEAoKCmMiIiIYAAAAAIqKigAAAAAA3t7eLZ2dncBBQUGOAAAABAAA
        AAAAAAAAAAAAABQiK1owZYX8KUZm/ylMav8tX3zqBwgKKgAAAAQXKzduMWaF8SxVc/8mO1f+ERcgmgoK
        Cw0AAAAAAAAAAAAAAAAAAAAAAAAAAAcHBzYKCgo7HR0dANTU1AAAAAAA0NDQAMzMzADS0tIzcHBwxg0N
        DSUAAAAAAAAAAAAAAAAICQsrLVx46CpMav8oRmb/L2KB+A0VGk0YLjpvMGSD8ypRbv8rRmj/KUln/ypR
        avsQFx1YAAAAAAAAAAAAAAAAAAAAAAAAAAAICAhCCgoKHx8fHwAAAAAAAAAAAAAAAAD6+voA////A3Z2
        dpsgICBEJCMjAD08OwD///8AAAAADCZNZMMsVXP/J0Nj/y5gf/0bMkDJMWSC8ipPbP8qRWf/KUto/zJp
        if0iQVWuCg0QIwAAAAAAAAAAAAAAAAAAAAAAAAAACQkJOgoKCiQODg4AAAAAAAAAAAAAAAAAAAAAAFVV
        VQBJSUlxGRkZNhoaGgAgQFYAIElkAB5AWAAeO0yLLlx7/yhBYv8tXHr/J01l/ypMaP8qRGX/K1Bt/zBk
        g/YbNUSNAAAAEwwQEwAAAAAAAAAAAAAAAAAAAAAAAAAAAA4ODhwNDQ0/CAgIAg8PDwAAAAAAFRUVAAUF
        BQAAAAAFCwsLlwsLC54KCgqLER4ngRUtPXIVKThhFSc1my1de/8oQ2P/LFZ0/yRFXf8oQF//LFVz/y9e
        e+gXKjZqAAAABwYHCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGBgBEBAQKhUVFRcICAgAFRUVABgY
        GAAAAAAJDQ0NaxsbG/IiIiL/ISAg/x4wPP8yc5r/OIOv/zJtkP4sW3b/KUlo/ypPbv8oT2n/K1Nu/ytW
        cdUSHidKAAAAAQMCAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBQUAAAAAAANDQ0uCgoKfxIS
        EmIRERFrFxcXrCMjI/UsLCz/LCws/ywsLP8nJyf/JkNW/0COvP82b5H/KlRt/ytRcP8pSWn/LFl2/x01
        RdAMEBUtJUZaAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwAEBAQXDQ0NqCAg
        IP4nJyf/Jycn/yoqKv8sLCz/LCws/ywsLP8sLCz/LSws/yUlJf8jPU3/MmWE/yJCVv8uWXj/KUZm/y5e
        fP8kR17jFSk3VgAAAAMJDhIAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQABAQEQDAwMoiIi
        Iv4tLS3/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/IyQl/xsoNP8rVW//MF9//ypH
        Z/8wYH//NnWa/zNxmO8ZN0qKBgkLHw4VJgAHBggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECQkJgh8f
        H/wsLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ygmJv8nR1r/PYWv/zJm
        hv8uT3H/M2KF/zl5nv9Em8z/NXuj/xw8T88KCg9ZAAAABwgGCAAZFgAAAAAAAAAAAAAAAAAABAQERBgY
        GO4sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ysqKv8iLjb/PYWv/0OY
        xv82cJH/LlNy/ypMav8oTm//J0l3/yI7eP8eLHv/GBxn9Q4PL5QFBAAZBwYLAAEBAAAAAAAAAAAADQ0N
        DbMnJyf/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8hISH/J0lh/zNp
        k/8pTnr/HzJm/x0ma/8cInz/HyWS/yEoo/8jK6//JC20/yMsr/8dIoT/EBE4tQYEACAGBQQAAAAAAAMD
        A04aGhryLS0t/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8oKCb/Fxk//x8p
        h/8fJ5T/ISeh/yMqrf8kLbT/JC62/yQttf8kLbT/JC2z/yQts/8kLbP/JCyy/x4jiP8ODzKvBAIAEgEA
        AAAJCQmhJSUl/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCv/Gxwm/x4k
        jP8lLrf/JC21/yQttP8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLLH/Gh52/AoK
        HHYAAAABEBAQ2yoqKv8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/Jycl/xcZ
        TP8kLLH/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yIq
        p/8RFEjXAwIAIhMTE/ErKyv/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LS0s/x4e
        Iv8cIX3/JS62/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQt
        s/8lLbX/Gh92+gYHD2YSEhLxKysr/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/yws
        K/8ZGSn/ICec/yQttf8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQt
        s/8kLbP/JC21/x8nl/8LDCaiDg4O0ykpKf8sLCz/LCws/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/yws
        LP8rKyn/Fxcy/yIqp/8kLbT/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQt
        s/8kLbP/JC2z/yQttP8jKqf/EBE6zQcHB4whISH+LS0t/ywsLP8sLCz/LCws/ywsLP8sLCz/LCws/yws
        LP8sLCz/Kysp/xYXMv8iKqf/JC20/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQt
        s/8kLbP/JC2z/yQts/8kLbP/JCyu/xEUR+cBAQExExMT4SsrK/8sLCz/LCws/ywsLP8sLCz/LCws/yws
        LP8sLCz/LCws/ywsK/8XGCn/ICee/yQttP8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQt
        s/8kLbP/JC2z/yQts/8kLbP/JC2z/yQssf8SFlDvAAAAAgcHB3YcHBz7LCws/ywsLP8sLCz/LCws/yws
        LP8sLCz/LCws/ywsLP8tLSz/Gxsh/xwih/8lLrb/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQt
        s/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbH/EhZQ8QEBAQACAgIOCQkJnR8fH/4sLCz/LCws/yws
        LP8sLCz/LCws/ywsLP8sLCz/LS0t/yIiIf8YHGP/JC22/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQt
        s/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/Iyyu/xATR+sAAAAAAgICAAICAhMJCQmVGhoa9ygo
        KP8sLCz/LS0t/y0tLf8tLS3/LS0t/ysrK/8iIiD/ERI2/yMrq/8kLbT/JC2z/yQts/8kLbP/JC2z/yQt
        s/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC20/yIqpf8OEDXOAAAAACgoKAAEBAQAAQEBCQUF
        BVwPDw/DGRkZ9CAgIP8iIiL/ISEh/xwcHPgUFBTZCwsKkwkIFZ0eI4j+JS22/yQts/8kLbP/JC2z/yQt
        s/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQttf8eJY//CQodlwAAAAAAAAAAAAAAAAUF
        BQADAwMAAQEBEQQEBEAHBwdrCAgIewcHB24EBARKAAAAHQAAAAEFAwEkExVN3iQsrv8kLbP/JC2z/yQt
        s/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8lLrX/Fxtm8gQEB0wAAAAAAAAAAAAA
        AAAAAAAAEhISAAgICAAEBAQAAwMDAAMDAwAEBAQABAQEAAQEBAAHCAYAAAAAAQgIF3QbIHn7JS61/yQt
        s/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbX/ICic/w0OMLIAAAANAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADl5eUAAAAAAAAAAAAAAAAAAAAAAAEBAAABAAAQDQ4trR8l
        kP8lLrb/JC2z/yQts/8kLbP/JC2z/yQts/8kLbP/JC2z/yQts/8kLbX/Iyuq/xMWUOYFBQY9AQAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwEBAAIC
        ACMPDzS9HiSL/yQttP8kLbX/JC2z/yQts/8kLbP/JC20/yQttf8kLbX/ISid/xQWUOcHBgxaAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL
        AAAEBQcAAwEAHgsLJJsWGmPvHyaU/yMrqf8kLK//JCyu/yIqp/8fJpP/GBxq9g0OMboFBANCAAAAAQQD
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAACwcAAAQDAwAAAAAIBAMDTgoKIaoPETrhERRI8xETRvIOEDfdCgsgqwUFBlsDAQASBQMLAAYG
        AgAAAAAAAAAAAPA+Bj7gHgQexw4ADs+OAA7PjgAOz88AHseAAD7HAAB+8AAB/uAAAP7AAAB+gAAAHoAA
        AA4AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAMAAAADgAAAA+AAAAP/4
        AAD//AAC//4AAv//AAb//4Ae
</value>
  </data>
</root>